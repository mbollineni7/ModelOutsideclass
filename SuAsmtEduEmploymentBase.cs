using System;
using System.ComponentModel;

namespace DSHS.CMBHS.Model 
{
//   <summary>
	// Generated By:   lactbprakash581 using CMBHS Generator v2.6
	// Schema:         CMBHS_TEST3
	// Date Generated: Wednesday, August 09, 2017
//   
/// Template Name:		CMBHSDomainObject.cs	
/// Template Version:	1.0
/// Template Date:		Dec 19, 2007
///
/// Template Description:
/// 	This template is used to generate
/// 	the base Domain objects for the DSHS.CMBHS.Model
///
/// Base Object Name:        SU_ASMT_EDU_EMPLOYMENT
/// Base Object Type:        Table
///
///  Class Information:
/// 	Base ClassName:      AbstractDomainObject
/// 	ClassName:           SuAsmtEduEmploymentBase
/// 	Name Space Name:     DSHS.CMBHS.Model
///
///  File Information:
/// 	Template File Name:  CMBHSTableDomain
/// 	Class File Name:         SuAsmtEduEmploymentBase.cs
///
/// Primary Key Name	PrimaryKeyColumnName 
/// ASSESSMENTEDUEMP_PK SU_ASMT_EDU_EMPLOYMENT_NBR
///   </summary>

	public class SuAsmtEduEmploymentBase : AbstractDomainObject
	{

		#region Table Attribute Accessors

		/// <summary>
		/// PrimaryKey property accessor
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
		public virtual String PrimaryKey{ get; set; }

		/// <summary>
		/// SuAsmtEduEmploymentNbr property accessor
		/// </summary>
		[CustomAttribute.Comment("Primary Key - Unique row identifier.")]
		public virtual int SuAsmtEduEmploymentNbr{ get; set;}

		/// <summary>
		/// SuAssessmentNbr property accessor
		/// </summary>
		[CustomAttribute.Comment("Primary Key - Unique row identifier for SU_ASSESSMENT parent table")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.SuAssessmentBase,DSHS.CMBHS.Model")]
		public virtual int SuAssessmentNbr{ get; set;}

		/// <summary>
		/// EduSchoolHighestGrade property accessor
		/// </summary>
		[CustomAttribute.Comment("What is the highest grade in school you completed?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.GradeBase,DSHS.CMBHS.Model")]
		public virtual short EduSchoolHighestGrade{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduSchoolHighestGradeSpecified
		{
			get { return EduSchoolHighestGrade != short.MinValue; }
		}


		/// <summary>
		/// EduSchoolFinishReason property accessor
		/// </summary>
		[CustomAttribute.Comment("Education: If you didnâ€™t finish school, why did you leave?")]
		public virtual string EduSchoolFinishReason{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduSchoolFinishReasonSpecified
		{
			get { return EduSchoolFinishReason != string.Empty; }
		}


		/// <summary>
		/// EduSubstanceStartGrade property accessor
		/// </summary>
		[CustomAttribute.Comment("Education:In what grade did you start using alcohol or drugs?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.GradeBase,DSHS.CMBHS.Model")]
		public virtual short EduSubstanceStartGrade{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduSubstanceStartGradeSpecified
		{
			get { return EduSubstanceStartGrade != short.MinValue; }
		}


		/// <summary>
		/// EduSubstanceStartAge property accessor
		/// </summary>
		[CustomAttribute.Comment("At  what age did you start using alcohol or drugs?Â ")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AgeRangeBase,DSHS.CMBHS.Model")]
		public virtual short EduSubstanceStartAge{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduSubstanceStartAgeSpecified
		{
			get { return EduSubstanceStartAge != short.MinValue; }
		}


		/// <summary>
		/// EduSubstanceSchoolProblem property accessor
		/// </summary>
		[CustomAttribute.Comment("Education:Did you start using alcohol or drugs after problems in school began?")]
		public virtual string EduSubstanceSchoolProblem{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduSubstanceSchoolProblemSpecified
		{
			get { return EduSubstanceSchoolProblem != string.Empty; }
		}


		/// <summary>
		/// EduSchoolExtraHelp property accessor
		/// </summary>
		[CustomAttribute.Comment("Education:Did you ever need extra help in school? ")]
		public virtual string EduSchoolExtraHelp{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduSchoolExtraHelpSpecified
		{
			get { return EduSchoolExtraHelp != string.Empty; }
		}


		/// <summary>
		/// EduWorkSchoolObligations property accessor
		/// </summary>
		[CustomAttribute.Comment("Education:Have you gotten so high or sick from alcohol or drugs that it kept you from fulfilling work or school obligations?")]
		public virtual string EduWorkSchoolObligations{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduWorkSchoolObligationsSpecified
		{
			get { return EduWorkSchoolObligations != string.Empty; }
		}


		/// <summary>
		/// EduWorkSchoolLessTime property accessor
		/// </summary>
		[CustomAttribute.Comment("Education: Have you spent less time at work or school so that you could drink or use drugs?")]
		public virtual string EduWorkSchoolLessTime{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduWorkSchoolLessTimeSpecified
		{
			get { return EduWorkSchoolLessTime != string.Empty; }
		}


		/// <summary>
		/// EduYearBullied property accessor
		/// </summary>
		[CustomAttribute.Comment("Education: In the last 12 months have you been bullied?")]
		public virtual string EduYearBullied{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduYearBulliedSpecified
		{
			get { return EduYearBullied != string.Empty; }
		}


		/// <summary>
		/// EduInSchoolCurrently property accessor
		/// </summary>
		[CustomAttribute.Comment("Education: Are you currently in school?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short EduInSchoolCurrently{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduInSchoolCurrentlySpecified
		{
			get { return EduInSchoolCurrently != short.MinValue; }
		}


		/// <summary>
		/// EduAssistanceEducation property accessor
		/// </summary>
		[CustomAttribute.Comment("Education:Would you like assistance with your educational status?")]
		public virtual string EduAssistanceEducation{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduAssistanceEducationSpecified
		{
			get { return EduAssistanceEducation != string.Empty; }
		}


		/// <summary>
		/// EduAssistanceGed property accessor
		/// </summary>
		[CustomAttribute.Comment("Education: Would you like assistance with obtaining a GED?")]
		public virtual string EduAssistanceGed{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduAssistanceGedSpecified
		{
			get { return EduAssistanceGed != string.Empty; }
		}


		/// <summary>
		/// EduComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Education comment")]
		public virtual string EduComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduCommentSpecified
		{
			get { return EduComment != string.Empty; }
		}


		/// <summary>
		/// EmpCurrentlyEmployed property accessor
		/// </summary>
		[CustomAttribute.Comment("Employment: Are you currently employed?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short EmpCurrentlyEmployed{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpCurrentlyEmployedSpecified
		{
			get { return EmpCurrentlyEmployed != short.MinValue; }
		}


		/// <summary>
		/// EmpStatus property accessor
		/// </summary>
		[CustomAttribute.Comment("What is your employment status?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.EmploymentStatusBase,DSHS.CMBHS.Model")]
		public virtual short EmpStatus{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpStatusSpecified
		{
			get { return EmpStatus != short.MinValue; }
		}


		/// <summary>
		/// EmpNotInLaborForce property accessor
		/// </summary>
		[CustomAttribute.Comment("Reason for Not In Labor Force?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.ReasonNotInLaborForceBase,DSHS.CMBHS.Model")]
		public virtual short EmpNotInLaborForce{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpNotInLaborForceSpecified
		{
			get { return EmpNotInLaborForce != short.MinValue; }
		}


		/// <summary>
		/// EmpLongestTimeWorked property accessor
		/// </summary>
		[CustomAttribute.Comment("What is the longest time the client has held a full-time job?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.LongestTimeWorkedBase,DSHS.CMBHS.Model")]
		public virtual short EmpLongestTimeWorked{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpLongestTimeWorkedSpecified
		{
			get { return EmpLongestTimeWorked != short.MinValue; }
		}


		/// <summary>
		/// EmpEmploymentAssistance property accessor
		/// </summary>
		[CustomAttribute.Comment("Employment:Would you like assistance with your employment status?")]
		public virtual string EmpEmploymentAssistance{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpEmploymentAssistanceSpecified
		{
			get { return EmpEmploymentAssistance != string.Empty; }
		}


		/// <summary>
		/// EduPrimaryIncomeSource property accessor
		/// </summary>
		[CustomAttribute.Comment("What is your primary source of income?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.IncomeSourceBase,DSHS.CMBHS.Model")]
		public virtual short EduPrimaryIncomeSource{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EduPrimaryIncomeSourceSpecified
		{
			get { return EduPrimaryIncomeSource != short.MinValue; }
		}


		/// <summary>
		/// EmpReceiveSsi property accessor
		/// </summary>
		[CustomAttribute.Comment("Employment:Have you ever received income from SSI?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short EmpReceiveSsi{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpReceiveSsiSpecified
		{
			get { return EmpReceiveSsi != short.MinValue; }
		}


		/// <summary>
		/// EmpEmploymentType property accessor
		/// </summary>
		[CustomAttribute.Comment("Employment:When you work, type of work do you do? ")]
		public virtual string EmpEmploymentType{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpEmploymentTypeSpecified
		{
			get { return EmpEmploymentType != string.Empty; }
		}


		/// <summary>
		/// EmpIllegalActivities property accessor
		/// </summary>
		[CustomAttribute.Comment("Employment:Have you ever engaged in illegal activities for profit?")]
		public virtual string EmpIllegalActivities{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpIllegalActivitiesSpecified
		{
			get { return EmpIllegalActivities != string.Empty; }
		}


		/// <summary>
		/// EmpIllegalActivityReason property accessor
		/// </summary>
		[CustomAttribute.Comment("Employment: What is the reson for illegal activities?")]
		public virtual string EmpIllegalActivityReason{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpIllegalActivityReasonSpecified
		{
			get { return EmpIllegalActivityReason != string.Empty; }
		}


		/// <summary>
		/// EmpServedMilitaryActive property accessor
		/// </summary>
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short EmpServedMilitaryActive{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpServedMilitaryActiveSpecified
		{
			get { return EmpServedMilitaryActive != short.MinValue; }
		}


		/// <summary>
		/// EmpServedMilitary property accessor
		/// </summary>
		[CustomAttribute.Comment("Employment: Have you ever served in the military?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short EmpServedMilitary{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpServedMilitarySpecified
		{
			get { return EmpServedMilitary != short.MinValue; }
		}


		/// <summary>
		/// EmpServedMilitaryBranch property accessor
		/// </summary>
		[CustomAttribute.Comment("Employment: Did you served in the National Guard, Reserves, Coast Guard or in any of the Active Duty Services?")]
		public virtual string EmpServedMilitaryBranch{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpServedMilitaryBranchSpecified
		{
			get { return EmpServedMilitaryBranch != string.Empty; }
		}


		/// <summary>
		/// EmpMilitaryDischStatus property accessor
		/// </summary>
		[CustomAttribute.Comment("If you served in the military what was the discharge status on your Defense Department Form 214?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.MilitaryDischargeStatusBase,DSHS.CMBHS.Model")]
		public virtual short EmpMilitaryDischStatus{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpMilitaryDischStatusSpecified
		{
			get { return EmpMilitaryDischStatus != short.MinValue; }
		}


		/// <summary>
		/// EmpAssistanceVeteranAffrs property accessor
		/// </summary>
		[CustomAttribute.Comment("Employment: Would you like assistance with your Veterans Affairs Services?")]
		public virtual string EmpAssistanceVeteranAffrs{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpAssistanceVeteranAffrsSpecified
		{
			get { return EmpAssistanceVeteranAffrs != string.Empty; }
		}


		/// <summary>
		/// EmpComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Employment comment")]
		public virtual string EmpComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool EmpCommentSpecified
		{
			get { return EmpComment != string.Empty; }
		}


		/// <summary>
		/// CreatedBy property accessor
		/// </summary>
		[CustomAttribute.Comment("This is the tracking number of the person who created the record. This field can be associated with the PERSON table to obtain additional information about the person who created the record.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int CreatedBy{ get; set;}

		/// <summary>
		/// CreatedDate property accessor
		/// </summary>
		[CustomAttribute.Comment("Date record was created.")]
		public virtual DateTime CreatedDate{ get; set;}

		/// <summary>
		/// UpdatedBy property accessor
		/// </summary>
		[CustomAttribute.Comment("This is the tracking number of the person who updated the record. This field can be associated with the PERSON table to obtain additional information about the person who updated the record.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int UpdatedBy{ get; set;}

		/// <summary>
		/// UpdatedDate property accessor
		/// </summary>
		[CustomAttribute.Comment("This is the tracking number of the person who updated the record. This field can be associated with the PERSON table to obtain additional information about the person who updated the record.")]
		public virtual DateTime UpdatedDate{ get; set;}
		#endregion Table Attribute Accessors
	}
}
