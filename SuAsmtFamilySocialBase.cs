using System;
using System.ComponentModel;

namespace DSHS.CMBHS.Model 
{
//   <summary>
	// Generated By:   VKakaraparthi118 using CMBHS Generator v2.6
	// Schema:         CMBHS_DEV3
	// Date Generated: Monday, April 11, 2022
//   
/// Template Name:		CMBHSDomainObject.cs	
/// Template Version:	1.0
/// Template Date:		Dec 19, 2007
///
/// Template Description:
/// 	This template is used to generate
/// 	the base Domain objects for the DSHS.CMBHS.Model
///
/// Base Object Name:        SU_ASMT_FAMILY_SOCIAL
/// Base Object Type:        Table
///
///  Class Information:
/// 	Base ClassName:      AbstractDomainObject
/// 	ClassName:           SuAsmtFamilySocialBase
/// 	Name Space Name:     DSHS.CMBHS.Model
///
///  File Information:
/// 	Template File Name:  CMBHSTableDomain
/// 	Class File Name:         SuAsmtFamilySocialBase.cs
///
/// Primary Key Name	PrimaryKeyColumnName 
/// SUASMTFAMILYSOCIAL_PK SU_ASMT_FAMILY_SOCIAL_NBR
///   </summary>

	public class SuAsmtFamilySocialBase : AbstractDomainObject
	{

		#region Table Attribute Accessors

		/// <summary>
		/// PrimaryKey property accessor
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
		public virtual String PrimaryKey{ get; set; }

		/// <summary>
		/// SuAsmtFamilySocialNbr property accessor
		/// </summary>
		[CustomAttribute.Comment("Primary Key - Unique row identifier.")]
		public virtual int SuAsmtFamilySocialNbr{ get; set;}

		/// <summary>
		/// SuAssessmentNbr property accessor
		/// </summary>
		[CustomAttribute.Comment("Unique row identifier for SU_ASSESSMENT table.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.SuAssessmentBase,DSHS.CMBHS.Model")]
		public virtual int SuAssessmentNbr{ get; set;}

		/// <summary>
		/// FhRaisedBirthParents property accessor
		/// </summary>
		[CustomAttribute.Comment("Were you raised by someone other than your biological/birth parents?")]
		public virtual string FhRaisedBirthParents{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool FhRaisedBirthParentsSpecified
		{
			get { return FhRaisedBirthParents != string.Empty; }
		}


		/// <summary>
		/// FhLivingSituationsCount property accessor
		/// </summary>
		[CustomAttribute.Comment("How many living situations (different primary caregiver) did you have while you were growing up?")]
		public virtual short FhLivingSituationsCount{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool FhLivingSituationsCountSpecified
		{
			get { return FhLivingSituationsCount != short.MinValue; }
		}


		/// <summary>
		/// FhLiveWithSubstanceUser property accessor
		/// </summary>
		[CustomAttribute.Comment("Did you live with anyone who was a problem drinker or alcoholic or who used street drugs?")]
		public virtual string FhLiveWithSubstanceUser{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool FhLiveWithSubstanceUserSpecified
		{
			get { return FhLiveWithSubstanceUser != string.Empty; }
		}


		/// <summary>
		/// FhHouseholdEsteemHurt property accessor
		/// </summary>
		[CustomAttribute.Comment("Swear at you, insult you, put you down or humiliate you? OR Act in a way that made you afraid that you might by physically hurt?")]
		public virtual string FhHouseholdEsteemHurt{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool FhHouseholdEsteemHurtSpecified
		{
			get { return FhHouseholdEsteemHurt != string.Empty; }
		}


		/// <summary>
		/// FhHouseholdAbuseInjury property accessor
		/// </summary>
		[CustomAttribute.Comment("Push, grab, slap, or throw something at you? OR Ever hit you so hard that you had marks or were injured?")]
		public virtual string FhHouseholdAbuseInjury{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool FhHouseholdAbuseInjurySpecified
		{
			get { return FhHouseholdAbuseInjury != string.Empty; }
		}


		/// <summary>
		/// FhOlderAdultMolestation property accessor
		/// </summary>
		[CustomAttribute.Comment("Did an adult or person at least 5 years older than you ever: Touch or fondle you or have you touch their body in a sexual way? OR Attempt or actually have oral, anal or vaginal intercourse with you?")]
		public virtual string FhOlderAdultMolestation{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool FhOlderAdultMolestationSpecified
		{
			get { return FhOlderAdultMolestation != string.Empty; }
		}


		/// <summary>
		/// FhFamilyLoveSupport property accessor
		/// </summary>
		[CustomAttribute.Comment("No one in your family loved you or thought you were important or special? OR Your family didnâ€™t look out for each other, feel close to each other, or support each other? ")]
		public virtual string FhFamilyLoveSupport{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool FhFamilyLoveSupportSpecified
		{
			get { return FhFamilyLoveSupport != string.Empty; }
		}


		/// <summary>
		/// FhStapleProtectCare property accessor
		/// </summary>
		[CustomAttribute.Comment("You didnâ€™t have enough to eat, had to wear dirty clothes, and had no one to protect you?  OR Your parents were too drunk or high to take care of you or take you to the doctor if you needed it?")]
		public virtual string FhStapleProtectCare{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool FhStapleProtectCareSpecified
		{
			get { return FhStapleProtectCare != string.Empty; }
		}


		/// <summary>
		/// FhParentsSeparated property accessor
		/// </summary>
		[CustomAttribute.Comment("Were your parents ever separated or divorced?")]
		public virtual string FhParentsSeparated{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool FhParentsSeparatedSpecified
		{
			get { return FhParentsSeparated != string.Empty; }
		}


		/// <summary>
		/// FhMotherAbuseThreatened property accessor
		/// </summary>
		[CustomAttribute.Comment("Was your mother or stepmother: Often pushed, grabbed, slapped, or had something thrown at her? OR Sometimes, often kicked, bitten, hit with a fist, or hit with something hard? OR Ever repeatedly hit at least a few minutes or threatened with a gun or knife?")]
		public virtual string FhMotherAbuseThreatened{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool FhMotherAbuseThreatenedSpecified
		{
			get { return FhMotherAbuseThreatened != string.Empty; }
		}


		/// <summary>
		/// FhComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Comments for the family history section.")]
		public virtual string FhComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool FhCommentSpecified
		{
			get { return FhComment != string.Empty; }
		}


		/// <summary>
		/// MauMotherDrink property accessor
		/// </summary>
		[CustomAttribute.Comment("To your knowledge, did your mother ever drink alcohol that caused problems for her or others around her?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short MauMotherDrink{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool MauMotherDrinkSpecified
		{
			get { return MauMotherDrink != short.MinValue; }
		}


		/// <summary>
		/// MauMotherDrinkYoung property accessor
		/// </summary>
		[CustomAttribute.Comment("Did your mother drink alcohol when you were young?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short MauMotherDrinkYoung{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool MauMotherDrinkYoungSpecified
		{
			get { return MauMotherDrinkYoung != short.MinValue; }
		}


		/// <summary>
		/// MauMotherDrinkPregnant property accessor
		/// </summary>
		[CustomAttribute.Comment("Did your mother drink alcohol while she was pregnant with you?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short MauMotherDrinkPregnant{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool MauMotherDrinkPregnantSpecified
		{
			get { return MauMotherDrinkPregnant != short.MinValue; }
		}


		/// <summary>
		/// MauHearsayDrinkPregnant property accessor
		/// </summary>
		[CustomAttribute.Comment("Has anyone ever said anything to you about your motherâ€™s drinking during her pregnancy with you?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short MauHearsayDrinkPregnant{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool MauHearsayDrinkPregnantSpecified
		{
			get { return MauHearsayDrinkPregnant != short.MinValue; }
		}


		/// <summary>
		/// MauComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Comment for Maternal Alcohol use.")]
		public virtual string MauComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool MauCommentSpecified
		{
			get { return MauComment != string.Empty; }
		}


		/// <summary>
		/// LsLiveOnOwnAdult property accessor
		/// </summary>
		[CustomAttribute.Comment("As an adult, have you ever lived on your own?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short LsLiveOnOwnAdult{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LsLiveOnOwnAdultSpecified
		{
			get { return LsLiveOnOwnAdult != short.MinValue; }
		}


		/// <summary>
		/// LsLiveOnOwnLength property accessor
		/// </summary>
		[CustomAttribute.Comment("How long have you lived on your own at any one time?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.LiveOnOwnLengthBase,DSHS.CMBHS.Model")]
		public virtual short LsLiveOnOwnLength{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LsLiveOnOwnLengthSpecified
		{
			get { return LsLiveOnOwnLength != short.MinValue; }
		}


		/// <summary>
		/// LsEverHomeless property accessor
		/// </summary>
		[CustomAttribute.Comment("Have you ever: Been homeless?")]
		public virtual string LsEverHomeless{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LsEverHomelessSpecified
		{
			get { return LsEverHomeless != string.Empty; }
		}


		/// <summary>
		/// LsEverWithoutFamily property accessor
		/// </summary>
		[CustomAttribute.Comment("Have you ever: Been without any family, friends, or caretakers? ")]
		public virtual string LsEverWithoutFamily{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LsEverWithoutFamilySpecified
		{
			get { return LsEverWithoutFamily != string.Empty; }
		}


		/// <summary>
		/// LsEverProtectiveSvcChild property accessor
		/// </summary>
		[CustomAttribute.Comment("Have you ever: Had state protective services involved with your family? As a child?")]
		public virtual string LsEverProtectiveSvcChild{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LsEverProtectiveSvcChildSpecified
		{
			get { return LsEverProtectiveSvcChild != string.Empty; }
		}


		/// <summary>
		/// LsEverProtectiveSvcAdult property accessor
		/// </summary>
		[CustomAttribute.Comment("Have you ever:Had state protective services involved with your family? Since being an adult? ")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short LsEverProtectiveSvcAdult{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LsEverProtectiveSvcAdultSpecified
		{
			get { return LsEverProtectiveSvcAdult != short.MinValue; }
		}


		/// <summary>
		/// LsEverPartnerViolence property accessor
		/// </summary>
		[CustomAttribute.Comment("Have you ever: Had a history of Intimate Partner Violence?")]
		public virtual string LsEverPartnerViolence{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LsEverPartnerViolenceSpecified
		{
			get { return LsEverPartnerViolence != string.Empty; }
		}


		/// <summary>
		/// LsEverBulliedAtHome property accessor
		/// </summary>
		[CustomAttribute.Comment("Have you ever: Been bullied at home?")]
		public virtual string LsEverBulliedAtHome{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LsEverBulliedAtHomeSpecified
		{
			get { return LsEverBulliedAtHome != string.Empty; }
		}


		/// <summary>
		/// LsComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Living sitution comment.")]
		public virtual string LsComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LsCommentSpecified
		{
			get { return LsComment != string.Empty; }
		}


		/// <summary>
		/// CtFeelSafeWhereYouLive property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Trauma: Do you currently feel safe where you live?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short CtFeelSafeWhereYouLive{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CtFeelSafeWhereYouLiveSpecified
		{
			get { return CtFeelSafeWhereYouLive != short.MinValue; }
		}


		/// <summary>
		/// CtFeelSafeWithPeople property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Trauma: Do you currently feel safe with the people in your life?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short CtFeelSafeWithPeople{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CtFeelSafeWithPeopleSpecified
		{
			get { return CtFeelSafeWithPeople != short.MinValue; }
		}


		/// <summary>
		/// CtComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Trauma: Comment")]
		public virtual string CtComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CtCommentSpecified
		{
			get { return CtComment != string.Empty; }
		}


		/// <summary>
		/// CssLivingLocation property accessor
		/// </summary>
		[CustomAttribute.Comment("What is your living situation?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.LivingSituationBase,DSHS.CMBHS.Model")]
		public virtual short CssLivingLocation{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssLivingLocationSpecified
		{
			get { return CssLivingLocation != short.MinValue; }
		}


		/// <summary>
		/// CssLivingLocDependent property accessor
		/// </summary>
		[CustomAttribute.Comment("What is your usual living arrangement since discharge?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.FsLivingLocDependentBase,DSHS.CMBHS.Model")]
		public virtual short CssLivingLocDependent{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssLivingLocDependentSpecified
		{
			get { return CssLivingLocDependent != short.MinValue; }
		}


		/// <summary>
		/// CssReleasedFromPrison property accessor
		/// </summary>
		[CustomAttribute.Comment("In the last 30 days have you been released from a secured environment such as residential substance use disorder treatment program, jail, or prison?")]
		public virtual string CssReleasedFromPrison{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssReleasedFromPrisonSpecified
		{
			get { return CssReleasedFromPrison != string.Empty; }
		}


		/// <summary>
		/// CssOpioidBeforeControlEnv property accessor
		/// </summary>
		[CustomAttribute.Comment("If yes, in the year before you entered the controlled environment did you use opioids?")]
		public virtual string CssOpioidBeforeControlEnv{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssOpioidBeforeControlEnvSpecified
		{
			get { return CssOpioidBeforeControlEnv != string.Empty; }
		}


		/// <summary>
		/// CssLivingLocDischarge property accessor
		/// </summary>
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.LivingSituationBase,DSHS.CMBHS.Model")]
		public virtual short CssLivingLocDischarge{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssLivingLocDischargeSpecified
		{
			get { return CssLivingLocDischarge != short.MinValue; }
		}


		/// <summary>
		/// CssLivingLocDschDepend property accessor
		/// </summary>
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.FsLivingLocDependentBase,DSHS.CMBHS.Model")]
		public virtual short CssLivingLocDschDepend{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssLivingLocDschDependSpecified
		{
			get { return CssLivingLocDschDepend != short.MinValue; }
		}


		/// <summary>
		/// CssMaritalStatus property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Social Status: Marital status: ")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.ClientMaritalStatusBase,DSHS.CMBHS.Model")]
		public virtual short CssMaritalStatus{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssMaritalStatusSpecified
		{
			get { return CssMaritalStatus != short.MinValue; }
		}


		/// <summary>
		/// CssNumberOfChildren property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Social Status: How many children do you have under the age of 18?")]
		public virtual short CssNumberOfChildren{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssNumberOfChildrenSpecified
		{
			get { return CssNumberOfChildren != short.MinValue; }
		}


		/// <summary>
		/// CssWorkingOnReunification property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Social Status: Are you currently working on Reunification?")]
		public virtual string CssWorkingOnReunification{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssWorkingOnReunificationSpecified
		{
			get { return CssWorkingOnReunification != string.Empty; }
		}


		/// <summary>
		/// CssAssistenceReunification property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Social Status:Would you like assistance with Reunification?")]
		public virtual string CssAssistenceReunification{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssAssistenceReunificationSpecified
		{
			get { return CssAssistenceReunification != string.Empty; }
		}


		/// <summary>
		/// CssFulfillFamObligations property accessor
		/// </summary>
		[CustomAttribute.Comment("CUrrent Social Status: Have you gotten so high or sick from alcohol or drugs that it kept you from fulfilling your family obligations?")]
		public virtual string CssFulfillFamObligations{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssFulfillFamObligationsSpecified
		{
			get { return CssFulfillFamObligations != string.Empty; }
		}


		/// <summary>
		/// CssLessTimeSupportSystem property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Social Status: Have you spent less time with your support system so that you could drink or use drugs? ")]
		public virtual string CssLessTimeSupportSystem{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssLessTimeSupportSystemSpecified
		{
			get { return CssLessTimeSupportSystem != string.Empty; }
		}


		/// <summary>
		/// CssProblemsSupportSystem property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Social Status: Has your use of alcohol or drugs caused problems with your support system?")]
		public virtual string CssProblemsSupportSystem{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssProblemsSupportSystemSpecified
		{
			get { return CssProblemsSupportSystem != string.Empty; }
		}


		/// <summary>
		/// CssSpendingTimeUsing property accessor
		/// </summary>
		[CustomAttribute.Comment("CUrrent Social System: Have you spent a lot of time getting alcohol or drugs, using them or recovering from their use?")]
		public virtual string CssSpendingTimeUsing{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssSpendingTimeUsingSpecified
		{
			get { return CssSpendingTimeUsing != string.Empty; }
		}


		/// <summary>
		/// CssMonthSelfHelp property accessor
		/// </summary>
		[CustomAttribute.Comment("In the past 30 days, how many times have you Â attended Â self-help groups? (e.g. AA, NA, etc.)")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.FsHelpGroupBase,DSHS.CMBHS.Model")]
		public virtual short CssMonthSelfHelp{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssMonthSelfHelpSpecified
		{
			get { return CssMonthSelfHelp != short.MinValue; }
		}


		/// <summary>
		/// CssMonthSupportGroup property accessor
		/// </summary>
		[CustomAttribute.Comment("In the past 30 days, how many times have you attended a community support group?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.FsHelpGroupBase,DSHS.CMBHS.Model")]
		public virtual short CssMonthSupportGroup{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssMonthSupportGroupSpecified
		{
			get { return CssMonthSupportGroup != short.MinValue; }
		}


		/// <summary>
		/// CssFunActivities property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Social Status:Do you do anything for fun?")]
		public virtual string CssFunActivities{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssFunActivitiesSpecified
		{
			get { return CssFunActivities != string.Empty; }
		}


		/// <summary>
		/// CssFunActivitiesExplain property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Social Status: If yes, please explain.")]
		public virtual string CssFunActivitiesExplain{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssFunActivitiesExplainSpecified
		{
			get { return CssFunActivitiesExplain != string.Empty; }
		}


		/// <summary>
		/// CssSpiritualPractices property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Social Status: Do you have any spiritual practices?")]
		public virtual string CssSpiritualPractices{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssSpiritualPracticesSpecified
		{
			get { return CssSpiritualPractices != string.Empty; }
		}


		/// <summary>
		/// CssSpiritualExplain property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Social Status: If yes, please explain.")]
		public virtual string CssSpiritualExplain{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssSpiritualExplainSpecified
		{
			get { return CssSpiritualExplain != string.Empty; }
		}


		/// <summary>
		/// CssPeopleTrustCount property accessor
		/// </summary>
		[CustomAttribute.Comment("How many people do you trust?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PeopleCountBase,DSHS.CMBHS.Model")]
		public virtual short CssPeopleTrustCount{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssPeopleTrustCountSpecified
		{
			get { return CssPeopleTrustCount != short.MinValue; }
		}


		/// <summary>
		/// CssPeopleRelyCount property accessor
		/// </summary>
		[CustomAttribute.Comment("How many people do you rely upon?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PeopleCountBase,DSHS.CMBHS.Model")]
		public virtual short CssPeopleRelyCount{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssPeopleRelyCountSpecified
		{
			get { return CssPeopleRelyCount != short.MinValue; }
		}


		/// <summary>
		/// CssFriendsFamilyUse property accessor
		/// </summary>
		[CustomAttribute.Comment("Current Social Status:Do any of your close friends or family use alcohol or other drugs?")]
		public virtual string CssFriendsFamilyUse{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssFriendsFamilyUseSpecified
		{
			get { return CssFriendsFamilyUse != string.Empty; }
		}


		/// <summary>
		/// CssAccessNaloxoneOverdose property accessor
		/// </summary>
		[CustomAttribute.Comment("Do you and/or your friends/family have access to naloxone or Narcan to reverse an overdose?")]
		public virtual string CssAccessNaloxoneOverdose{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssAccessNaloxoneOverdoseSpecified
		{
			get { return CssAccessNaloxoneOverdose != string.Empty; }
		}


		/// <summary>
		/// CssComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Current social status comment.")]
		public virtual string CssComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CssCommentSpecified
		{
			get { return CssComment != string.Empty; }
		}


		/// <summary>
		/// CreatedBy property accessor
		/// </summary>
		[CustomAttribute.Comment("This is the tracking number of the person who created the record. This field can be associated with the PERSON table to obtain additional information about the person who created the record.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int CreatedBy{ get; set;}

		/// <summary>
		/// CreatedDate property accessor
		/// </summary>
		[CustomAttribute.Comment("Date record was created.")]
		public virtual DateTime CreatedDate{ get; set;}

		/// <summary>
		/// UpdatedBy property accessor
		/// </summary>
		[CustomAttribute.Comment("This is the tracking number of the person who updated the record. This field can be associated with the PERSON table to obtain additional information about the person who updated the record.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int UpdatedBy{ get; set;}

		/// <summary>
		/// UpdatedDate property accessor
		/// </summary>
		[CustomAttribute.Comment("Date record was updated.")]
		public virtual DateTime UpdatedDate{ get; set;}
		#endregion Table Attribute Accessors
	}
}
