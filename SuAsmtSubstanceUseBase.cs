using System;
using System.ComponentModel;

namespace DSHS.CMBHS.Model 
{
//   <summary>
	// Generated By:   lactbprakash581 using CMBHS Generator v2.6
	// Schema:         CMBHS_TEST3
	// Date Generated: Wednesday, August 09, 2017
//   
/// Template Name:		CMBHSDomainObject.cs	
/// Template Version:	1.0
/// Template Date:		Dec 19, 2007
///
/// Template Description:
/// 	This template is used to generate
/// 	the base Domain objects for the DSHS.CMBHS.Model
///
/// Base Object Name:        SU_ASMT_SUBSTANCE_USE
/// Base Object Type:        Table
///
///  Class Information:
/// 	Base ClassName:      AbstractDomainObject
/// 	ClassName:           SuAsmtSubstanceUseBase
/// 	Name Space Name:     DSHS.CMBHS.Model
///
///  File Information:
/// 	Template File Name:  CMBHSTableDomain
/// 	Class File Name:         SuAsmtSubstanceUseBase.cs
///
/// Primary Key Name	PrimaryKeyColumnName 
/// SUASMTSUBSTANCEUSE_PK SU_ASMT_SUBSTANCE_USE_NBR
///   </summary>

	public class SuAsmtSubstanceUseBase : AbstractDomainObject
	{

		#region Table Attribute Accessors

		/// <summary>
		/// PrimaryKey property accessor
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
		public virtual String PrimaryKey{ get; set; }

		/// <summary>
		/// SuAsmtSubstanceUseNbr property accessor
		/// </summary>
		[CustomAttribute.Comment("Primary Key - Unique row identifier.")]
		public virtual int SuAsmtSubstanceUseNbr{ get; set;}

		/// <summary>
		/// SuAssessmentNbr property accessor
		/// </summary>
		[CustomAttribute.Comment("Unique row identifier for SU_ASSESSMENT table.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.SuAssessmentBase,DSHS.CMBHS.Model")]
		public virtual int SuAssessmentNbr{ get; set;}

		/// <summary>
		/// HrbEverInjectedDrugs property accessor
		/// </summary>
		[CustomAttribute.Comment("High Risk Behaviors: Have you ever Injected drugs?")]
		public virtual string HrbEverInjectedDrugs{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HrbEverInjectedDrugsSpecified
		{
			get { return HrbEverInjectedDrugs != string.Empty; }
		}


		/// <summary>
		/// HrbEverSharedInjection property accessor
		/// </summary>
		[CustomAttribute.Comment("High Risk Behaviors:Have you ever Shared injecting equipment? ")]
		public virtual string HrbEverSharedInjection{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HrbEverSharedInjectionSpecified
		{
			get { return HrbEverSharedInjection != string.Empty; }
		}


		/// <summary>
		/// HrbEverSharedSnorting property accessor
		/// </summary>
		[CustomAttribute.Comment("High Risk Behaviors:Have you ever Shared equipment for snorting drugs? ")]
		public virtual string HrbEverSharedSnorting{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HrbEverSharedSnortingSpecified
		{
			get { return HrbEverSharedSnorting != string.Empty; }
		}


		/// <summary>
		/// HrbEverUnprotectedSex property accessor
		/// </summary>
		[CustomAttribute.Comment("High Risk Behaviors:Have you ever had unprotected sex without condoms or latex barriers?")]
		public virtual string HrbEverUnprotectedSex{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HrbEverUnprotectedSexSpecified
		{
			get { return HrbEverUnprotectedSex != string.Empty; }
		}


		/// <summary>
		/// HrbEverUnprotectedInject property accessor
		/// </summary>
		[CustomAttribute.Comment("High Risk Behaviors:Have you ever had unprotected sex with someone who injects drugs?")]
		public virtual string HrbEverUnprotectedInject{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HrbEverUnprotectedInjectSpecified
		{
			get { return HrbEverUnprotectedInject != string.Empty; }
		}


		/// <summary>
		/// HrbEverTattoosPiercings property accessor
		/// </summary>
		[CustomAttribute.Comment("High Risk Behaviors:Have you ever do you have tattoos or piercings?")]
		public virtual string HrbEverTattoosPiercings{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HrbEverTattoosPiercingsSpecified
		{
			get { return HrbEverTattoosPiercings != string.Empty; }
		}


		/// <summary>
		/// HrbEverPersistentCough property accessor
		/// </summary>
		[CustomAttribute.Comment("High Risk Behaviors:Have you ever have you had a persistent cough (longer than three months) and not visited a doctor?")]
		public virtual string HrbEverPersistentCough{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HrbEverPersistentCoughSpecified
		{
			get { return HrbEverPersistentCough != string.Empty; }
		}


		/// <summary>
		/// HrbEverTbScreen property accessor
		/// </summary>
		[CustomAttribute.Comment("High Risk Behaviors:Have you ever have you been tested (screened for TB) within the past year?")]
		public virtual string HrbEverTbScreen{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HrbEverTbScreenSpecified
		{
			get { return HrbEverTbScreen != string.Empty; }
		}


		/// <summary>
		/// HrbComment property accessor
		/// </summary>
		[CustomAttribute.Comment("High Risk Behaviors comment.")]
		public virtual string HrbComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HrbCommentSpecified
		{
			get { return HrbComment != string.Empty; }
		}


		/// <summary>
		/// SuFirstUseAge property accessor
		/// </summary>
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AgeRangeBase,DSHS.CMBHS.Model")]
		public virtual short SuFirstUseAge{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool SuFirstUseAgeSpecified
		{
			get { return SuFirstUseAge != short.MinValue; }
		}


		/// <summary>
		/// SuSeekSuTreatment property accessor
		/// </summary>
		[CustomAttribute.Comment("Substance Use: Have you ever sought Substance Use Treatment before today?")]
		public virtual string SuSeekSuTreatment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool SuSeekSuTreatmentSpecified
		{
			get { return SuSeekSuTreatment != string.Empty; }
		}


		/// <summary>
		/// SuComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Substance Use: Comment")]
		public virtual string SuComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool SuCommentSpecified
		{
			get { return SuComment != string.Empty; }
		}


		/// <summary>
		/// CreatedBy property accessor
		/// </summary>
		[CustomAttribute.Comment("This is the tracking number of the person who created the record. This field can be associated with the PERSON table to obtain additional information about the person who created the record.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int CreatedBy{ get; set;}

		/// <summary>
		/// CreatedDate property accessor
		/// </summary>
		[CustomAttribute.Comment("Date record was created.")]
		public virtual DateTime CreatedDate{ get; set;}

		/// <summary>
		/// UpdatedBy property accessor
		/// </summary>
		[CustomAttribute.Comment("This is the tracking number of the person who updated the record. This field can be associated with the PERSON table to obtain additional information about the person who updated the record.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int UpdatedBy{ get; set;}

		/// <summary>
		/// UpdatedDate property accessor
		/// </summary>
		[CustomAttribute.Comment("Date record was updated.")]
		public virtual DateTime UpdatedDate{ get; set;}

		/// <summary>
		/// SuSeekTreatmentDischarge property accessor
		/// </summary>
		public virtual string SuSeekTreatmentDischarge{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool SuSeekTreatmentDischargeSpecified
		{
			get { return SuSeekTreatmentDischarge != string.Empty; }
		}

		#endregion Table Attribute Accessors
	}
}
