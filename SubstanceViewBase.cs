using System;

namespace DSHS.CMBHS.Model 
{
/// <summary>
/// Generated By:   lactacheerala712 using CMBHS Generator v2.6
/// Schema:         CMBHSDEV2
/// Date Generated: Friday, March 01, 2013
///
/// Template Name:           CMBHSDomainObject.cs	
/// Template Version:        1.0
/// Template Date:           Jan 08, 2008
///
/// Template Description:    This template is used to generate
/// 					the base Domain objects for the DSHS.CMBHS.Model
///
/// Base Object Name:        SUBSTANCE_VIEW
/// Base Object Type:        View
///
/// Class Information:
/// 	Base ClassName:      DSHS.CMBHS.Model.AbstractDomainObject
/// 	ClassName:           SubstanceViewBase
/// 	Name Space Name:     DSHS.CMBHS.Model
///
/// File Information:
/// 	Template File Name:  CMBHSViewDomain
/// 	Class File Name:         SubstanceViewBase.cs
///
/// </summary>

	public class SubstanceViewBase : AbstractDomainObject
	{

		#region SubstanceViewBase Constructor

		public SubstanceViewBase () : base (){}

		#endregion

		#region Table Attribute Accessors


		public virtual short ValueNbr{ get; set;}

		#region ValueNbrSpecified property accessor
		/// <summary>
		/// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		/// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		/// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		/// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		/// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		/// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ValueNbrSpecified
		{
			get { return ValueNbr != short.MinValue; }
		}

		#endregion ValueNbrSpecified property accessor


		public virtual string ValueAbbrv{ get; set;}

		#region ValueAbbrvSpecified property accessor
		/// <summary>
		/// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		/// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		/// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		/// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		/// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		/// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ValueAbbrvSpecified
		{
			get { return ValueAbbrv != string.Empty; }
		}

		#endregion ValueAbbrvSpecified property accessor


		public virtual short ParentValueNbr{ get; set;}

		#region ParentValueNbrSpecified property accessor
		/// <summary>
		/// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		/// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		/// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		/// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		/// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		/// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ParentValueNbrSpecified
		{
			get { return ParentValueNbr != short.MinValue; }
		}

		#endregion ParentValueNbrSpecified property accessor


		public virtual int SortOrder{ get; set;}

		#region SortOrderSpecified property accessor
		/// <summary>
		/// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		/// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		/// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		/// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		/// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		/// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool SortOrderSpecified
		{
			get { return SortOrder != int.MinValue; }
		}

		#endregion SortOrderSpecified property accessor

		#endregion Table Attribute Accessors
	}
}
