using System;
using System.ComponentModel;

namespace DSHS.CMBHS.Model 
{
//   <summary>
	// Generated By:   lactbprakash581 using CMBHS Generator v2.6
	// Schema:         CMBHS_TEST3
	// Date Generated: Wednesday, August 09, 2017
//   
/// Template Name:		CMBHSDomainObject.cs	
/// Template Version:	1.0
/// Template Date:		Dec 19, 2007
///
/// Template Description:
/// 	This template is used to generate
/// 	the base Domain objects for the DSHS.CMBHS.Model
///
/// Base Object Name:        SU_ASMT_MENTAL_HEALTH
/// Base Object Type:        Table
///
///  Class Information:
/// 	Base ClassName:      AbstractDomainObject
/// 	ClassName:           SuAsmtMentalHealthBase
/// 	Name Space Name:     DSHS.CMBHS.Model
///
///  File Information:
/// 	Template File Name:  CMBHSTableDomain
/// 	Class File Name:         SuAsmtMentalHealthBase.cs
///
/// Primary Key Name	PrimaryKeyColumnName 
/// SUASMTMENTALHEALTH_PK SU_ASMT_MENTAL_HEALTH_NBR
///   </summary>

	public class SuAsmtMentalHealthBase : AbstractDomainObject
	{

		#region Table Attribute Accessors

		/// <summary>
		/// PrimaryKey property accessor
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
		public virtual String PrimaryKey{ get; set; }

		/// <summary>
		/// SuAsmtMentalHealthNbr property accessor
		/// </summary>
		[CustomAttribute.Comment("Primary Key - Unique row identifier.")]
		public virtual int SuAsmtMentalHealthNbr{ get; set;}

		/// <summary>
		/// SuAssessmentNbr property accessor
		/// </summary>
		[CustomAttribute.Comment("Unique row identifier for SU_ASSESSMENT table.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.SuAssessmentBase,DSHS.CMBHS.Model")]
		public virtual int SuAssessmentNbr{ get; set;}

		/// <summary>
		/// HistChildhoodMhServices property accessor
		/// </summary>
		[CustomAttribute.Comment("Did you receive childhood mental health services?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AnswerTypeBase,DSHS.CMBHS.Model")]
		public virtual short HistChildhoodMhServices{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistChildhoodMhServicesSpecified
		{
			get { return HistChildhoodMhServices != short.MinValue; }
		}


		/// <summary>
		/// HistMhIssuesInformed property accessor
		/// </summary>
		[CustomAttribute.Comment("Other than a problem with substance use, have you been told you have mental health difficulties or disorders?")]
		public virtual string HistMhIssuesInformed{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistMhIssuesInformedSpecified
		{
			get { return HistMhIssuesInformed != string.Empty; }
		}


		/// <summary>
		/// HistMhIssuesShared property accessor
		/// </summary>
		[CustomAttribute.Comment("List of MH issues.")]
		public virtual string HistMhIssuesShared{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistMhIssuesSharedSpecified
		{
			get { return HistMhIssuesShared != string.Empty; }
		}


		/// <summary>
		/// HistHouseholdMhIssue property accessor
		/// </summary>
		[CustomAttribute.Comment("Was a household member depressed or mentally ill?")]
		public virtual string HistHouseholdMhIssue{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistHouseholdMhIssueSpecified
		{
			get { return HistHouseholdMhIssue != string.Empty; }
		}


		/// <summary>
		/// HistHouseholdSuicide property accessor
		/// </summary>
		[CustomAttribute.Comment("Did a household member attempt suicide?")]
		public virtual string HistHouseholdSuicide{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistHouseholdSuicideSpecified
		{
			get { return HistHouseholdSuicide != string.Empty; }
		}


		/// <summary>
		/// HistChangeSleepEatWeight property accessor
		/// </summary>
		[CustomAttribute.Comment("Have you experienced changes in sleep, eating or your weight?")]
		public virtual string HistChangeSleepEatWeight{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistChangeSleepEatWeightSpecified
		{
			get { return HistChangeSleepEatWeight != string.Empty; }
		}


		/// <summary>
		/// HistEverVoices property accessor
		/// </summary>
		[CustomAttribute.Comment("Heard voices no one else could hear or seen objects or things which others could not see?")]
		public virtual string HistEverVoices{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistEverVoicesSpecified
		{
			get { return HistEverVoices != string.Empty; }
		}


		/// <summary>
		/// HistEverParanoia property accessor
		/// </summary>
		[CustomAttribute.Comment("Felt that people had something against you, without them necessarily saying so, or that someone or some group may be trying to influence your thoughts or behavior? ")]
		public virtual string HistEverParanoia{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistEverParanoiaSpecified
		{
			get { return HistEverParanoia != string.Empty; }
		}


		/// <summary>
		/// HistIdeasComeRapidly property accessor
		/// </summary>
		[CustomAttribute.Comment("When you were so full of energy and your ideas came very rapidly?")]
		public virtual string HistIdeasComeRapidly{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistIdeasComeRapidlySpecified
		{
			get { return HistIdeasComeRapidly != string.Empty; }
		}


		/// <summary>
		/// HistTalkNonStop property accessor
		/// </summary>
		[CustomAttribute.Comment("When you talked nearly non-stop?")]
		public virtual string HistTalkNonStop{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistTalkNonStopSpecified
		{
			get { return HistTalkNonStop != string.Empty; }
		}


		/// <summary>
		/// HistNeedLittleSleep property accessor
		/// </summary>
		[CustomAttribute.Comment("When you needed little sleep?")]
		public virtual string HistNeedLittleSleep{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistNeedLittleSleepSpecified
		{
			get { return HistNeedLittleSleep != string.Empty; }
		}


		/// <summary>
		/// HistUnbearableSadness property accessor
		/// </summary>
		[CustomAttribute.Comment("Experienced feelings of sadness that were unbearable?")]
		public virtual string HistUnbearableSadness{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistUnbearableSadnessSpecified
		{
			get { return HistUnbearableSadness != string.Empty; }
		}


		/// <summary>
		/// HistNoPleasureInActivity property accessor
		/// </summary>
		[CustomAttribute.Comment("Lost pleasure in all or almost all activities?")]
		public virtual string HistNoPleasureInActivity{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistNoPleasureInActivitySpecified
		{
			get { return HistNoPleasureInActivity != string.Empty; }
		}


		/// <summary>
		/// HistInappropriateGuilt property accessor
		/// </summary>
		[CustomAttribute.Comment("Felt worthless or have excessive or inappropriate guilt?")]
		public virtual string HistInappropriateGuilt{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistInappropriateGuiltSpecified
		{
			get { return HistInappropriateGuilt != string.Empty; }
		}


		/// <summary>
		/// HistNoFocusDecisionThink property accessor
		/// </summary>
		[CustomAttribute.Comment("Been unable to make decisions, concentrate, or think?")]
		public virtual string HistNoFocusDecisionThink{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistNoFocusDecisionThinkSpecified
		{
			get { return HistNoFocusDecisionThink != string.Empty; }
		}


		/// <summary>
		/// HistWithoutArguingFight property accessor
		/// </summary>
		[CustomAttribute.Comment("Getting along with others without arguing or fighting?")]
		public virtual string HistWithoutArguingFight{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistWithoutArguingFightSpecified
		{
			get { return HistWithoutArguingFight != string.Empty; }
		}


		/// <summary>
		/// HistDifficultManageAnger property accessor
		/// </summary>
		[CustomAttribute.Comment("Had difficulty managing anger?")]
		public virtual string HistDifficultManageAnger{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDifficultManageAngerSpecified
		{
			get { return HistDifficultManageAnger != string.Empty; }
		}


		/// <summary>
		/// HistExcessiveAnxiety property accessor
		/// </summary>
		[CustomAttribute.Comment("Experienced excessive anxiety and worry?")]
		public virtual string HistExcessiveAnxiety{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistExcessiveAnxietySpecified
		{
			get { return HistExcessiveAnxiety != string.Empty; }
		}


		/// <summary>
		/// HistBelieveDoAnything property accessor
		/// </summary>
		[CustomAttribute.Comment("Believed you could do almost anything?")]
		public virtual string HistBelieveDoAnything{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistBelieveDoAnythingSpecified
		{
			get { return HistBelieveDoAnything != string.Empty; }
		}


		/// <summary>
		/// HistSelfInjuryBehavior property accessor
		/// </summary>
		[CustomAttribute.Comment("Engaged in self-injurious behavior?")]
		public virtual string HistSelfInjuryBehavior{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistSelfInjuryBehaviorSpecified
		{
			get { return HistSelfInjuryBehavior != string.Empty; }
		}


		/// <summary>
		/// HistKillAnimal property accessor
		/// </summary>
		[CustomAttribute.Comment("Tried to hurt or kill an animal?")]
		public virtual string HistKillAnimal{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistKillAnimalSpecified
		{
			get { return HistKillAnimal != string.Empty; }
		}


		/// <summary>
		/// HistKillPerson property accessor
		/// </summary>
		[CustomAttribute.Comment("Tried to hurt or kill a person?")]
		public virtual string HistKillPerson{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistKillPersonSpecified
		{
			get { return HistKillPerson != string.Empty; }
		}


		/// <summary>
		/// HistDamageOthersProperty property accessor
		/// </summary>
		[CustomAttribute.Comment("Intentionally damaged property that was not yours?")]
		public virtual string HistDamageOthersProperty{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDamageOthersPropertySpecified
		{
			get { return HistDamageOthersProperty != string.Empty; }
		}


		/// <summary>
		/// TimesPsychologicalProblems property accessor
		/// </summary>
		[CustomAttribute.Comment("How many times have you been treated for psychological problems in a hospital/residential treatment setting?")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.TimesPsychologicalProblemBase,DSHS.CMBHS.Model")]
		public virtual short TimesPsychologicalProblems{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool TimesPsychologicalProblemsSpecified
		{
			get { return TimesPsychologicalProblems != short.MinValue; }
		}


		/// <summary>
		/// HistEmotionalPsycProb property accessor
		/// </summary>
		[CustomAttribute.Comment("Has your use of alcohol or drugs caused emotional or psychological problems?Â ")]
		public virtual string HistEmotionalPsycProb{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistEmotionalPsycProbSpecified
		{
			get { return HistEmotionalPsycProb != string.Empty; }
		}


		/// <summary>
		/// HistDifficultConcentrate property accessor
		/// </summary>
		[CustomAttribute.Comment("Difficult concentrating and paying attention?")]
		public virtual string HistDifficultConcentrate{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDifficultConcentrateSpecified
		{
			get { return HistDifficultConcentrate != string.Empty; }
		}


		/// <summary>
		/// HistDifficultUnderstand property accessor
		/// </summary>
		[CustomAttribute.Comment("Difficulty in understanding what adults were telling you?")]
		public virtual string HistDifficultUnderstand{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDifficultUnderstandSpecified
		{
			get { return HistDifficultUnderstand != string.Empty; }
		}


		/// <summary>
		/// HistDifficultRemember property accessor
		/// </summary>
		[CustomAttribute.Comment("Diffgiculty in remembering things?")]
		public virtual string HistDifficultRemember{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDifficultRememberSpecified
		{
			get { return HistDifficultRemember != string.Empty; }
		}


		/// <summary>
		/// HistDifficultFollowRules property accessor
		/// </summary>
		[CustomAttribute.Comment("Difficulty in following rules and instructions?")]
		public virtual string HistDifficultFollowRules{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDifficultFollowRulesSpecified
		{
			get { return HistDifficultFollowRules != string.Empty; }
		}


		/// <summary>
		/// HistDifficultGettingAlong property accessor
		/// </summary>
		[CustomAttribute.Comment("Difficulty in getting along with others without arguing or fighting?")]
		public virtual string HistDifficultGettingAlong{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDifficultGettingAlongSpecified
		{
			get { return HistDifficultGettingAlong != string.Empty; }
		}


		/// <summary>
		/// HistDifficultBeeingOntime property accessor
		/// </summary>
		[CustomAttribute.Comment("Difficulty in being on time?")]
		public virtual string HistDifficultBeeingOntime{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDifficultBeeingOntimeSpecified
		{
			get { return HistDifficultBeeingOntime != string.Empty; }
		}


		/// <summary>
		/// HistDifficultBudget property accessor
		/// </summary>
		[CustomAttribute.Comment("Keeping enough money to last you throughout the month?")]
		public virtual string HistDifficultBudget{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDifficultBudgetSpecified
		{
			get { return HistDifficultBudget != string.Empty; }
		}


		/// <summary>
		/// HistDifficultRegret property accessor
		/// </summary>
		[CustomAttribute.Comment("Doing things that later you wish you hadnot done?")]
		public virtual string HistDifficultRegret{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDifficultRegretSpecified
		{
			get { return HistDifficultRegret != string.Empty; }
		}


		/// <summary>
		/// HistDifficultUpsetLittle property accessor
		/// </summary>
		[CustomAttribute.Comment("Difficulty in getting really upset at little things or what people have told you are little?")]
		public virtual string HistDifficultUpsetLittle{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDifficultUpsetLittleSpecified
		{
			get { return HistDifficultUpsetLittle != string.Empty; }
		}


		/// <summary>
		/// HistDifficultAppointment property accessor
		/// </summary>
		[CustomAttribute.Comment("Forgetting or missing appointments?")]
		public virtual string HistDifficultAppointment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDifficultAppointmentSpecified
		{
			get { return HistDifficultAppointment != string.Empty; }
		}


		/// <summary>
		/// HistDifficultSurprise property accessor
		/// </summary>
		[CustomAttribute.Comment("Being surprised when you are in trouble?")]
		public virtual string HistDifficultSurprise{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistDifficultSurpriseSpecified
		{
			get { return HistDifficultSurprise != string.Empty; }
		}


		/// <summary>
		/// HistWishedDead property accessor
		/// </summary>
		[CustomAttribute.Comment("Have you wished you were dead or wished you could go to sleep and not wake up?")]
		public virtual string HistWishedDead{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistWishedDeadSpecified
		{
			get { return HistWishedDead != string.Empty; }
		}


		/// <summary>
		/// HistAttemptSuicide property accessor
		/// </summary>
		[CustomAttribute.Comment("Have you ever tried to commit suicide?")]
		public virtual string HistAttemptSuicide{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistAttemptSuicideSpecified
		{
			get { return HistAttemptSuicide != string.Empty; }
		}


		/// <summary>
		/// HistComment property accessor
		/// </summary>
		[CustomAttribute.Comment("History section comment.")]
		public virtual string HistComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool HistCommentSpecified
		{
			get { return HistComment != string.Empty; }
		}


		/// <summary>
		/// CurrentProfessionalHeping property accessor
		/// </summary>
		[CustomAttribute.Comment("Are you currently seeing a Licensed Professional of the Healing Arts for any mental health condition or problem?")]
		public virtual string CurrentProfessionalHeping{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CurrentProfessionalHepingSpecified
		{
			get { return CurrentProfessionalHeping != string.Empty; }
		}


		/// <summary>
		/// CurrentTreatmentList property accessor
		/// </summary>
		[CustomAttribute.Comment("List of treatments you are undergoing.")]
		public virtual string CurrentTreatmentList{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CurrentTreatmentListSpecified
		{
			get { return CurrentTreatmentList != string.Empty; }
		}


		/// <summary>
		/// CurrentTakingPrescription property accessor
		/// </summary>
		[CustomAttribute.Comment("Are you taking any prescription medications?")]
		public virtual string CurrentTakingPrescription{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CurrentTakingPrescriptionSpecified
		{
			get { return CurrentTakingPrescription != string.Empty; }
		}


		/// <summary>
		/// CurrentPrescriptionList property accessor
		/// </summary>
		[CustomAttribute.Comment("Prescription medication list.")]
		public virtual string CurrentPrescriptionList{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CurrentPrescriptionListSpecified
		{
			get { return CurrentPrescriptionList != string.Empty; }
		}


		/// <summary>
		/// CurntKillingThoughts property accessor
		/// </summary>
		[CustomAttribute.Comment("Are you currently having thoughts of killing yourself?")]
		public virtual string CurntKillingThoughts{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CurntKillingThoughtsSpecified
		{
			get { return CurntKillingThoughts != string.Empty; }
		}


		/// <summary>
		/// CurrentAssistanceWithMh property accessor
		/// </summary>
		[CustomAttribute.Comment("Would you like assistance with your mental health?")]
		public virtual string CurrentAssistanceWithMh{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CurrentAssistanceWithMhSpecified
		{
			get { return CurrentAssistanceWithMh != string.Empty; }
		}


		/// <summary>
		/// CurrentComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Cuurent section comment.")]
		public virtual string CurrentComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool CurrentCommentSpecified
		{
			get { return CurrentComment != string.Empty; }
		}


		/// <summary>
		/// CreatedBy property accessor
		/// </summary>
		[CustomAttribute.Comment("This is the tracking number of the person who created the record. This field can be associated with the PERSON table to obtain additional information about the person who created the record.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int CreatedBy{ get; set;}

		/// <summary>
		/// CreatedDate property accessor
		/// </summary>
		[CustomAttribute.Comment("Date record was created.")]
		public virtual DateTime CreatedDate{ get; set;}

		/// <summary>
		/// UpdatedBy property accessor
		/// </summary>
		[CustomAttribute.Comment("This is the tracking number of the person who updated the record. This field can be associated with the PERSON table to obtain additional information about the person who updated the record.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int UpdatedBy{ get; set;}

		/// <summary>
		/// UpdatedDate property accessor
		/// </summary>
		[CustomAttribute.Comment("Date record was updated.")]
		public virtual DateTime UpdatedDate{ get; set;}
		#endregion Table Attribute Accessors
	}
}
