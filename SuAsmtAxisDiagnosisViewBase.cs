using System;

namespace DSHS.CMBHS.Model 
{
/// <summary>
/// Generated By:   LACTmnimmala933 using CMBHS Generator v2.6
/// Schema:         CMBHS_DEV3
/// Date Generated: Wednesday, May 31, 2017
///
/// Template Name:           CMBHSDomainObject.cs	
/// Template Version:        1.0
/// Template Date:           Jan 08, 2008
///
/// Template Description:    This template is used to generate
/// 					the base Domain objects for the DSHS.CMBHS.Model
///
/// Base Object Name:        SU_ASMT_AXIS_DIAGNOSIS_VIEW
/// Base Object Type:        View
///
/// Class Information:
/// 	Base ClassName:      DSHS.CMBHS.Model.AbstractDomainObject
/// 	ClassName:           SuAsmtAxisDiagnosisViewBase
/// 	Name Space Name:     DSHS.CMBHS.Model
///
/// File Information:
/// 	Template File Name:  CMBHSViewDomain
/// 	Class File Name:         SuAsmtAxisDiagnosisViewBase.cs
///
/// </summary>

	public class SuAsmtAxisDiagnosisViewBase : AbstractDomainObject
	{

		#region SuAsmtAxisDiagnosisViewBase Constructor

		public SuAsmtAxisDiagnosisViewBase () : base (){}

		#endregion

		#region Table Attribute Accessors


		public virtual int SuAssessmentNbr{ get; set;}

		public virtual int SuAsmtDiagnosisNbr{ get; set;}

		public virtual short SeverityScore{ get; set;}

		#region SeverityScoreSpecified property accessor
		/// <summary>
		/// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		/// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		/// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		/// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		/// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		/// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool SeverityScoreSpecified
		{
			get { return SeverityScore != short.MinValue; }
		}

		#endregion SeverityScoreSpecified property accessor


		public virtual int SuAsmtAxisDiagnosisNbr{ get; set;}

		public virtual short DiagnosisOrder{ get; set;}

		#region DiagnosisOrderSpecified property accessor
		/// <summary>
		/// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		/// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		/// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		/// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		/// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		/// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool DiagnosisOrderSpecified
		{
			get { return DiagnosisOrder != short.MinValue; }
		}

		#endregion DiagnosisOrderSpecified property accessor


		public virtual int Diagnosis{ get; set;}

		#region DiagnosisSpecified property accessor
		/// <summary>
		/// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		/// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		/// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		/// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		/// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		/// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool DiagnosisSpecified
		{
			get { return Diagnosis != int.MinValue; }
		}

		#endregion DiagnosisSpecified property accessor


        public virtual short AxisJustificationType { get; set; }

        #region AxisJustificationTypeSpecified property accessor
        /// <summary>
		/// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		/// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		/// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		/// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		/// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		/// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
        public virtual bool AxisJustificationTypeSpecified
		{
            get { return AxisJustificationType != short.MinValue; }
        }

        #endregion AxisJustificationTypeSpecified property accessor

        #endregion Table Attribute Accessors
    }
}
