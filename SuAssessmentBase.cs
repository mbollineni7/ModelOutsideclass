using System;
using System.ComponentModel;

namespace DSHS.CMBHS.Model 
{
//   <summary>
	// Generated By:   WASLugo01 using CMBHS Generator v2.6
	// Schema:         CMBHS_DEV3
	// Date Generated: Tuesday, July 19, 2022
//   
/// Template Name:		CMBHSDomainObject.cs	
/// Template Version:	1.0
/// Template Date:		Dec 19, 2007
///
/// Template Description:
/// 	This template is used to generate
/// 	the base Domain objects for the DSHS.CMBHS.Model
///
/// Base Object Name:        SU_ASSESSMENT
/// Base Object Type:        Table
///
///  Class Information:
/// 	Base ClassName:      AbstractDomainObject
/// 	ClassName:           SuAssessmentBase
/// 	Name Space Name:     DSHS.CMBHS.Model
///
///  File Information:
/// 	Template File Name:  CMBHSTableDomain
/// 	Class File Name:         SuAssessmentBase.cs
///
/// Primary Key Name	PrimaryKeyColumnName 
/// SA_ASSESSMENT_PK SU_ASSESSMENT_NBR
///   </summary>

	public class SuAssessmentBase : AbstractDomainObject
	{

		#region Table Attribute Accessors

		/// <summary>
		/// PrimaryKey property accessor
		/// </summary>
		[System.Xml.Serialization.XmlIgnore]
		public virtual String PrimaryKey{ get; set; }

		/// <summary>
		/// SuAssessmentNbr property accessor
		/// </summary>
		[CustomAttribute.Comment("This is the tracking number of the assessment.")]
		public virtual int SuAssessmentNbr{ get; set;}

		/// <summary>
		/// ClientNbr property accessor
		/// </summary>
		[CustomAttribute.Comment("Client for this SU assessment.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.ClientBase,DSHS.CMBHS.Model")]
		public virtual int ClientNbr{ get; set;}

		/// <summary>
		/// OrganizationNbr property accessor
		/// </summary>
		[CustomAttribute.Comment("Provider location at which this assessment is created.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.OrganizationBase,DSHS.CMBHS.Model")]
		public virtual int OrganizationNbr{ get; set;}

		/// <summary>
		/// AssessmentType property accessor
		/// </summary>
		[CustomAttribute.Comment("Assessment Type Â like initial, detox intake, case management initial etc.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AssessmentTypeBase,DSHS.CMBHS.Model")]
		public virtual short AssessmentType{ get; set;}

		/// <summary>
		/// AssessmentDate property accessor
		/// </summary>
		[CustomAttribute.Comment("The date on which this assessment is created.")]
		public virtual DateTime AssessmentDate{ get; set;}

		/// <summary>
		/// DischargeFollowupDate property accessor
		/// </summary>
		public virtual DateTime DischargeFollowupDate{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool DischargeFollowupDateSpecified
		{
			get { return DischargeFollowupDate != DateTime.MinValue; }
		}


		/// <summary>
		/// ContactDate property accessor
		/// </summary>
		public virtual DateTime ContactDate{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ContactDateSpecified
		{
			get { return ContactDate != DateTime.MinValue; }
		}


		/// <summary>
		/// ContactOutcome property accessor
		/// </summary>
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.FollowupOutcomeBase,DSHS.CMBHS.Model")]
		public virtual short ContactOutcome{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ContactOutcomeSpecified
		{
			get { return ContactOutcome != short.MinValue; }
		}


		/// <summary>
		/// ContactMode property accessor
		/// </summary>
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.FollowupModeBase,DSHS.CMBHS.Model")]
		public virtual short ContactMode{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ContactModeSpecified
		{
			get { return ContactMode != short.MinValue; }
		}


		/// <summary>
		/// ContactPhone property accessor
		/// </summary>
		public virtual string ContactPhone{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ContactPhoneSpecified
		{
			get { return ContactPhone != string.Empty; }
		}


		/// <summary>
		/// FollowupType property accessor
		/// </summary>
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.FollowupTypeBase,DSHS.CMBHS.Model")]
		public virtual short FollowupType{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool FollowupTypeSpecified
		{
			get { return FollowupType != short.MinValue; }
		}


		/// <summary>
		/// PerformedBy property accessor
		/// </summary>
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int PerformedBy{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool PerformedBySpecified
		{
			get { return PerformedBy != int.MinValue; }
		}


		/// <summary>
		/// ExpirationDate property accessor
		/// </summary>
		public virtual DateTime ExpirationDate{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ExpirationDateSpecified
		{
			get { return ExpirationDate != DateTime.MinValue; }
		}


		/// <summary>
		/// ContactType property accessor
		/// </summary>
		[CustomAttribute.Comment("Contact type like face to face, telehealth, telephone for the assessment.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.SuContactTypeBase,DSHS.CMBHS.Model")]
		public virtual short ContactType{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ContactTypeSpecified
		{
			get { return ContactType != short.MinValue; }
		}


		/// <summary>
		/// AssessmentSite property accessor
		/// </summary>
		[CustomAttribute.Comment("Assessment Site like Home, Hospice, Hospital etc. for this assessment.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AssessmentSiteBase,DSHS.CMBHS.Model")]
		public virtual short AssessmentSite{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool AssessmentSiteSpecified
		{
			get { return AssessmentSite != short.MinValue; }
		}


		/// <summary>
		/// ReferralSource property accessor
		/// </summary>
		[CustomAttribute.Comment("Referred by like Community health service, Community mental health etc. for this assessment.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.ReferralTypeBase,DSHS.CMBHS.Model")]
		public virtual short ReferralSource{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ReferralSourceSpecified
		{
			get { return ReferralSource != short.MinValue; }
		}


		/// <summary>
		/// AsmtInfoComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Assessment information comment.")]
		public virtual string AsmtInfoComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool AsmtInfoCommentSpecified
		{
			get { return AsmtInfoComment != string.Empty; }
		}


		/// <summary>
		/// PresentingProblem property accessor
		/// </summary>
		[CustomAttribute.Comment("Presenting problem description.")]
		public virtual string PresentingProblem{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool PresentingProblemSpecified
		{
			get { return PresentingProblem != string.Empty; }
		}


		/// <summary>
		/// SubstancesSeek property accessor
		/// </summary>
		[CustomAttribute.Comment("What substances do you seek?")]
		public virtual string SubstancesSeek{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool SubstancesSeekSpecified
		{
			get { return SubstancesSeek != string.Empty; }
		}


		/// <summary>
		/// SubstanceUsedDays property accessor
		/// </summary>
		[CustomAttribute.Comment("How many days have you used?")]
		public virtual short SubstanceUsedDays{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool SubstanceUsedDaysSpecified
		{
			get { return SubstanceUsedDays != short.MinValue; }
		}


		/// <summary>
		/// SubstanceNotUsedDays property accessor
		/// </summary>
		[CustomAttribute.Comment("How many days has the client been abstinent from all substances?")]
		public virtual short SubstanceNotUsedDays{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool SubstanceNotUsedDaysSpecified
		{
			get { return SubstanceNotUsedDays != short.MinValue; }
		}


		/// <summary>
		/// LastMonthComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Last 30 Days section comments.")]
		public virtual string LastMonthComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LastMonthCommentSpecified
		{
			get { return LastMonthComment != string.Empty; }
		}


		/// <summary>
		/// LiteracyLanguage property accessor
		/// </summary>
		[CustomAttribute.Comment("Literacy, Language or Auditory challenges?")]
		public virtual string LiteracyLanguage{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LiteracyLanguageSpecified
		{
			get { return LiteracyLanguage != string.Empty; }
		}


		/// <summary>
		/// LastMonthLiteracyComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Last 30 Days literacy, language section comments.")]
		public virtual string LastMonthLiteracyComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LastMonthLiteracyCommentSpecified
		{
			get { return LastMonthLiteracyComment != string.Empty; }
		}


		/// <summary>
		/// ProviderComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Other current service provider section comment.")]
		public virtual string ProviderComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ProviderCommentSpecified
		{
			get { return ProviderComment != string.Empty; }
		}


		/// <summary>
		/// Interviewer property accessor
		/// </summary>
		[CustomAttribute.Comment("Interviewer person number.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int Interviewer{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool InterviewerSpecified
		{
			get { return Interviewer != int.MinValue; }
		}


		/// <summary>
		/// PrimaryCounselor property accessor
		/// </summary>
		[CustomAttribute.Comment("Primary counselor person number.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int PrimaryCounselor{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool PrimaryCounselorSpecified
		{
			get { return PrimaryCounselor != int.MinValue; }
		}


		/// <summary>
		/// DischargeDate property accessor
		/// </summary>
		public virtual DateTime DischargeDate{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool DischargeDateSpecified
		{
			get { return DischargeDate != DateTime.MinValue; }
		}


		/// <summary>
		/// DischargeReason property accessor
		/// </summary>
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.DischargeReasonBase,DSHS.CMBHS.Model")]
		public virtual short DischargeReason{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool DischargeReasonSpecified
		{
			get { return DischargeReason != short.MinValue; }
		}


		/// <summary>
		/// AnticipatedDischargeDate property accessor
		/// </summary>
		public virtual DateTime AnticipatedDischargeDate{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool AnticipatedDischargeDateSpecified
		{
			get { return AnticipatedDischargeDate != DateTime.MinValue; }
		}


		/// <summary>
		/// ReferralPrimary property accessor
		/// </summary>
		public virtual short ReferralPrimary{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ReferralPrimarySpecified
		{
			get { return ReferralPrimary != short.MinValue; }
		}


		/// <summary>
		/// ReferralSecondary property accessor
		/// </summary>
		public virtual short ReferralSecondary{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ReferralSecondarySpecified
		{
			get { return ReferralSecondary != short.MinValue; }
		}


		/// <summary>
		/// ReferralTertiary property accessor
		/// </summary>
		public virtual short ReferralTertiary{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ReferralTertiarySpecified
		{
			get { return ReferralTertiary != short.MinValue; }
		}


		/// <summary>
		/// StaffInfoComment property accessor
		/// </summary>
		[CustomAttribute.Comment("Staff information section comment.")]
		public virtual string StaffInfoComment{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool StaffInfoCommentSpecified
		{
			get { return StaffInfoComment != string.Empty; }
		}


		/// <summary>
		/// DocumentStatus property accessor
		/// </summary>
		[CustomAttribute.Comment("This field provides the status of the document. The code table for this field is DOCUMENT_STATUS.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.DocumentStatusBase,DSHS.CMBHS.Model")]
		public virtual short DocumentStatus{ get; set;}

		/// <summary>
		/// DocumentStatusDate property accessor
		/// </summary>
		[CustomAttribute.Comment("Current document Status date.")]
		public virtual DateTime DocumentStatusDate{ get; set;}

		/// <summary>
		/// ApprovedBy property accessor
		/// </summary>
		[CustomAttribute.Comment("Approver person number.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int ApprovedBy{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ApprovedBySpecified
		{
			get { return ApprovedBy != int.MinValue; }
		}


		/// <summary>
		/// ApprovedDate property accessor
		/// </summary>
		[CustomAttribute.Comment("The date on which this is approved.")]
		public virtual DateTime ApprovedDate{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool ApprovedDateSpecified
		{
			get { return ApprovedDate != DateTime.MinValue; }
		}


		/// <summary>
		/// AgeType property accessor
		/// </summary>
		[CustomAttribute.Comment("Age of the client.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.AgeTypeBase,DSHS.CMBHS.Model")]
		public virtual short AgeType{ get; set;}

		/// <summary>
		/// BaseAssessmentNbr property accessor
		/// </summary>
		public virtual int BaseAssessmentNbr{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool BaseAssessmentNbrSpecified
		{
			get { return BaseAssessmentNbr != int.MinValue; }
		}


		/// <summary>
		/// AdmissionNbr property accessor
		/// </summary>
		public virtual int AdmissionNbr{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool AdmissionNbrSpecified
		{
			get { return AdmissionNbr != int.MinValue; }
		}


		/// <summary>
		/// CreatedBy property accessor
		/// </summary>
		[CustomAttribute.Comment("This is the tracking number of the person who created the record. This field can be associated with the PERSON table to obtain additional information about the person who created the record.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int CreatedBy{ get; set;}

		/// <summary>
		/// CreatedDate property accessor
		/// </summary>
		[CustomAttribute.Comment("Date record was created.")]
		public virtual DateTime CreatedDate{ get; set;}

		/// <summary>
		/// UpdatedBy property accessor
		/// </summary>
		[CustomAttribute.Comment("This is the tracking number of the person who updated the record. This field can be associated with the PERSON table to obtain additional information about the person who updated the record.")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.PersonBase,DSHS.CMBHS.Model")]
		public virtual int UpdatedBy{ get; set;}

		/// <summary>
		/// UpdatedDate property accessor
		/// </summary>
		[CustomAttribute.Comment("Date record was updated.")]
		public virtual DateTime UpdatedDate{ get; set;}

		/// <summary>
		/// LocalSuAssessmentNbr property accessor
		/// </summary>
		[CustomAttribute.Comment("This Column used to save the document ID for a batch transaction.")]
		public virtual string LocalSuAssessmentNbr{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool LocalSuAssessmentNbrSpecified
		{
			get { return LocalSuAssessmentNbr != string.Empty; }
		}


		/// <summary>
		/// InterviewerOther property accessor
		/// </summary>
		[CustomAttribute.Comment("For batch records, stores the name interviewer")]
		public virtual string InterviewerOther{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool InterviewerOtherSpecified
		{
			get { return InterviewerOther != string.Empty; }
		}


		/// <summary>
		/// InterviewerOtherCred property accessor
		/// </summary>
		[CustomAttribute.Comment("For batch records, stores the credentials of the interviewer")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.CredentialBase,DSHS.CMBHS.Model")]
		public virtual short InterviewerOtherCred{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool InterviewerOtherCredSpecified
		{
			get { return InterviewerOtherCred != short.MinValue; }
		}


		/// <summary>
		/// PrimaryCounselorOther property accessor
		/// </summary>
		[CustomAttribute.Comment("For batch records, stores the name of the primary counselor")]
		public virtual string PrimaryCounselorOther{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool PrimaryCounselorOtherSpecified
		{
			get { return PrimaryCounselorOther != string.Empty; }
		}


		/// <summary>
		/// PrimaryCounselorOtherCred property accessor
		/// </summary>
		[CustomAttribute.Comment("For batch records, stores the credentials of the primary counselor")]
		[CustomAttribute.ReferencedClass("DSHS.CMBHS.Model.CredentialBase,DSHS.CMBHS.Model")]
		public virtual short PrimaryCounselorOtherCred{ get; set;}

		// Used by XmlSerializer when serialized. We use a special pattern to create a Boolean field recognized
		// by the XmlSerializer, and to apply the XmlIgnoreAttribute to the field. The pattern is created in the
		// form of propertyNameSpecified. For example, if there is a field named "MyFirstName" you would also
		// create a field named "MyFirstNameSpecified" that instructs the XmlSerializer whether to generate the
		// XML element named "MyFirstName". We use this for all nullable properties. This will cause the property
		// to not render as an XmlElement (otherwise value types like short would render an element's text as -32768).
		[System.Xml.Serialization.XmlIgnore]
		public virtual bool PrimaryCounselorOtherCredSpecified
		{
			get { return PrimaryCounselorOtherCred != short.MinValue; }
		}

		#endregion Table Attribute Accessors
	}
}
